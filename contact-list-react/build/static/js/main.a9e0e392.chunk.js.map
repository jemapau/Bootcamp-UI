{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","BrowserRouter","App_Navigation","Route","exact","path","component","Home","ContactListSection","Component","Navigation","Link","to","_this2","all","favorites","addToFavorites","bind","assertThisInitialized","onClickDelete","contact","console","log","newFavorites","concat","newAll","filter","c","email","setState","e","splice","favItems","items","_this3","fetch","then","results","json","data","App_ContactList","contacts","title","key","ContactList","map","App_ContactCard","login","uuid","proptypes","PropTypes","func","isRequired","array","string","defaultProps","ContactCard","_this4","onClickFavorites","src","picture","large","alt","name","first","cell","location","city","onClick","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9e0e392.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  \n  render() {\n\n    return (\n      <div className=\"App\">\n          <BrowserRouter>\n            <div>\n              <Navigation />\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/contactlist\" component={ContactListSection} />\n            </div>\n          </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst Navigation = (props) => {\n  return (\n    <nav className=\"navigation\">\n      <ul>\n        <li>\n          <Link to={`/`}>Home</Link>\n        </li>\n        <li>\n        <Link to={`/contactlist`}> Contacts</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nconst Home = (props) => {\n  return(\n    <div className=\"home\">\n        <section className=\"home__cta\">\n             <p>Manage all your contacts in on place <span>ðŸ’™</span> </p>\n             <Link to={`/contactlist`}  className=\"home__cta__btn\">Start here</Link>\n        </section>\n    </div>\n  )\n}\n\n\n\nclass ContactListSection extends Component {\n  constructor(props) {\n    super(props);\n\n    // Guardar elementos o caracteristicas que necesita el proyecto\n\n    this.state = {\n      //El estado en que se inicializa. El estado nunca se modifica desde el Render.\n      all: [],\n      favorites: []\n    };\n\n    this.addToFavorites = this.addToFavorites.bind(this);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  addToFavorites(contact) {\n    console.log('AÃ±adir a favoritos' , contact);\n\n    //const contactIndex = this.state.all.findIndex( \n      //c => c.id.value === contact.id.value\n    //);\n\n    const newFavorites = this.state.favorites.concat(contact);\n\n    const newAll = this.state.all.filter(c => c.email !== contact.email);\n    console.log('index', \"This is the new:  \" + newAll);\n\n    this.setState({\n      all: newAll,\n      favorites: newFavorites\n    });\n  }\n\n  onClickDelete(e) {\n    //console.log('Hola este es el contacto: ', e.email);\n\n    const deleteFavorites = this.state.favorites.splice(e,1);\n    const deleteAll = this.state.all.splice(e,1);\n\n    var favItems = this.state.favorites\n\n    console.log(\"Estos son los items la lista de favoritos\" + favItems);\n\n\n    this.setState({\n        items: favItems\n    });\n}\n\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=60')\n      .then(results => results.json())\n      .then(data => {\n        this.setState ({\n            all:  data.results\n        });\n      });\n    //this.setState({\n    //});\n\n  }\n\n  //componentDidUpdate() {\n  //\n  //}\n  \n  render() {\n\n    return (\n        <div className=\"wrapper\">\n        <ContactList className=\"column\" contacts={this.state.all} title=\"All contacts\" key=\"1\" addToFavorites={this.addToFavorites} onClickDelete={this.onClickDelete}/>\n        <ContactList className=\"column\" contacts={this.state.favorites} title=\"Your Favorites\" key=\"2\" addToFavorites={this.addToFavorites} onClickDelete={this.onClickDelete}/>\n        </div>\n    );\n  }\n}\n\n\n\n\n\nconst ContactList = (props) => {\n  return (\n      <div className={props.className}>\n        <h2 className=\"title\">{props.title}</h2>\n        {props.contacts.map(contact => <ContactCard  key={contact.login.uuid}  contact={contact} addToFavorites={props.addToFavorites} onClickDelete={props.onClickDelete}/>)}    \n      </div>\n  );\n};\n\nContactList.proptypes  = {\n  addToFavorites: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nContactList.defaultProps = {\n  title: 'Titulo',\n};\n\nclass ContactCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickFavorites = this.onClickFavorites.bind(this);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  onClickFavorites() {\n      this.props.addToFavorites(this.props.contact);\n  }\n\n  onClickDelete() {\n\n    this.props.onClickDelete(this.props.contact);\n\n}\n\n\n  render() {\n    //console.log(this.props);\n    return (\n      <div className=\"contact\">\n      <div className=\"contact__img\">\n        <figure className=\"contact__data\">\n          < img src={this.props.contact.picture.large} alt=\"Author\"/>\n        </figure>\n      </div>\n\n        <div className=\"contact__info\">\n        <figcaption>{this.props.contact.name.first}</figcaption>\n        <p><strong>Phone:</strong> {this.props.contact.cell}</p>\n        <p><strong>City:</strong> {this.props.contact.location.city}</p>\n          <button onClick={this.onClickFavorites}>Favorite</button>\n          <button onClick={this.onClickDelete} className=\"contact__delete\">Delete</button>\n          </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}