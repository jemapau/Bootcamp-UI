{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","BrowserRouter","App_Navigation","Route","exact","path","component","Home","ContactListSection","Component","Navigation","Link","to","_this2","onClickDelete","items","allItems","favorites","filter","e","setState","all","addToFavorites","bind","assertThisInitialized","contact","console","log","newFavorites","concat","newAll","c","email","_this3","fetch","then","results","json","data","App_ContactList","contacts","title","key","ContactList","map","App_ContactCard","login","uuid","proptypes","PropTypes","func","isRequired","array","string","defaultProps","ContactCard","_this4","onClickFavorites","src","picture","large","alt","name","first","cell","location","city","onClick","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9914ea48.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  \n  render() {\n\n    return (\n      <div className=\"App\">\n          <BrowserRouter>\n            <div>\n              <Navigation />\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/contactlist\" component={ContactListSection} />\n            </div>\n          </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst Navigation = (props) => {\n  return (\n    <nav className=\"navigation\">\n      <ul>\n        <li>\n          <Link to={`/`}>Home</Link>\n        </li>\n        <li>\n        <Link to={`/contactlist`}> Contacts</Link>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nconst Home = (props) => {\n  return(\n    <div className=\"home\">\n        <section className=\"home__cta\">\n             <p>Manage all your contacts in one place <span>ðŸ’™</span> </p>\n             <Link to={`/contactlist`}  className=\"home__cta__btn\">Start here</Link>\n        </section>\n    </div>\n  )\n}\n\n\n\nclass ContactListSection extends Component {\n  constructor(props) {\n    super(props);\n\n    // Guardar elementos o caracteristicas que necesita el proyecto\n\n    this.state = {\n      //El estado en que se inicializa. El estado nunca se modifica desde el Render.\n      all: [],\n      favorites: []\n    };\n\n    this.addToFavorites = this.addToFavorites.bind(this);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  addToFavorites(contact) {\n    console.log('AÃ±adir a favoritos' , contact);\n\n    //const contactIndex = this.state.all.findIndex( \n      //c => c.id.value === contact.id.value\n    //);\n\n    const newFavorites = this.state.favorites.concat(contact);\n\n    const newAll = this.state.all.filter(c => c.email !== contact.email);\n    console.log('index', \"This is the new:  \" + newAll);\n\n    this.setState({\n      all: newAll,\n      favorites: newFavorites\n    });\n  }\n\n  onClickDelete = items => {\n    var allItems = this.state.favorites.filter( e => e !== items);\n\n    this.setState({\n      favorites: allItems\n    });\n  }\n\n\n  componentDidMount() {\n    fetch('https://randomuser.me/api/?results=60')\n      .then(results => results.json())\n      .then(data => {\n        this.setState ({\n            all:  data.results\n        });\n      });\n    //this.setState({\n    //});\n\n  }\n\n  //componentDidUpdate() {\n  //\n  //}\n  \n  render() {\n\n    return (\n        <div className=\"wrapper\">\n        <ContactList className=\"column\" contacts={this.state.all} title=\"All contacts\" key=\"1\" addToFavorites={this.addToFavorites} onClickDelete={this.onClickDelete}/>\n        <ContactList className=\"column\" contacts={this.state.favorites} title=\"Your Favorites\" key=\"2\" addToFavorites={this.addToFavorites} onClickDelete={this.onClickDelete}/>\n        </div>\n    );\n  }\n}\n\n\n\n\n\nconst ContactList = (props) => {\n  return (\n      <div className={props.className}>\n        <h2 className=\"title\">{props.title}</h2>\n        {props.contacts.map(contact => <ContactCard  key={contact.login.uuid}  contact={contact} addToFavorites={props.addToFavorites} onClickDelete={props.onClickDelete}/>)}    \n      </div>\n  );\n};\n\nContactList.proptypes  = {\n  addToFavorites: PropTypes.func.isRequired,\n  contacts: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired\n};\n\nContactList.defaultProps = {\n  title: 'Titulo',\n};\n\nclass ContactCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickFavorites = this.onClickFavorites.bind(this);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  }\n\n  onClickFavorites() {\n      this.props.addToFavorites(this.props.contact);\n  }\n\n  onClickDelete() {\n\n    this.props.onClickDelete(this.props.contact);\n\n}\n\n\n  render() {\n    //console.log(this.props);\n    return (\n      <div className=\"contact\">\n      <div className=\"contact__img\">\n        <figure className=\"contact__data\">\n          < img src={this.props.contact.picture.large} alt=\"Author\"/>\n        </figure>\n      </div>\n\n        <div className=\"contact__info\">\n        <figcaption>{this.props.contact.name.first}</figcaption>\n        <p><strong>Phone:</strong> {this.props.contact.cell}</p>\n        <p><strong>City:</strong> {this.props.contact.location.city}</p>\n          <button onClick={this.onClickFavorites}>Favorite</button>\n          <button onClick={this.onClickDelete} className=\"contact__delete\">Delete</button>\n          </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}